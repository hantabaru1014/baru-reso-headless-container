// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: headless/headless.proto

package headless

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HeadlessControlClient is the client API for HeadlessControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HeadlessControlClient interface {
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownReply, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsReply, error)
	StartWorld(ctx context.Context, in *StartWorldRequest, opts ...grpc.CallOption) (*StartWorldReply, error)
	StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*StopSessionReply, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserReply, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleReply, error)
	UpdateSessionParameters(ctx context.Context, in *UpdateSessionParametersRequest, opts ...grpc.CallOption) (*UpdateSessionParametersReply, error)
}

type headlessControlClient struct {
	cc grpc.ClientConnInterface
}

func NewHeadlessControlClient(cc grpc.ClientConnInterface) HeadlessControlClient {
	return &headlessControlClient{cc}
}

func (c *headlessControlClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownReply, error) {
	out := new(ShutdownReply)
	err := c.cc.Invoke(ctx, "/headless.HeadlessControl/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsReply, error) {
	out := new(ListSessionsReply)
	err := c.cc.Invoke(ctx, "/headless.HeadlessControl/ListSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlClient) StartWorld(ctx context.Context, in *StartWorldRequest, opts ...grpc.CallOption) (*StartWorldReply, error) {
	out := new(StartWorldReply)
	err := c.cc.Invoke(ctx, "/headless.HeadlessControl/StartWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlClient) StopSession(ctx context.Context, in *StopSessionRequest, opts ...grpc.CallOption) (*StopSessionReply, error) {
	out := new(StopSessionReply)
	err := c.cc.Invoke(ctx, "/headless.HeadlessControl/StopSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserReply, error) {
	out := new(InviteUserReply)
	err := c.cc.Invoke(ctx, "/headless.HeadlessControl/InviteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlClient) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...grpc.CallOption) (*UpdateUserRoleReply, error) {
	out := new(UpdateUserRoleReply)
	err := c.cc.Invoke(ctx, "/headless.HeadlessControl/UpdateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headlessControlClient) UpdateSessionParameters(ctx context.Context, in *UpdateSessionParametersRequest, opts ...grpc.CallOption) (*UpdateSessionParametersReply, error) {
	out := new(UpdateSessionParametersReply)
	err := c.cc.Invoke(ctx, "/headless.HeadlessControl/UpdateSessionParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeadlessControlServer is the server API for HeadlessControl service.
// All implementations must embed UnimplementedHeadlessControlServer
// for forward compatibility
type HeadlessControlServer interface {
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownReply, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsReply, error)
	StartWorld(context.Context, *StartWorldRequest) (*StartWorldReply, error)
	StopSession(context.Context, *StopSessionRequest) (*StopSessionReply, error)
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserReply, error)
	UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleReply, error)
	UpdateSessionParameters(context.Context, *UpdateSessionParametersRequest) (*UpdateSessionParametersReply, error)
	mustEmbedUnimplementedHeadlessControlServer()
}

// UnimplementedHeadlessControlServer must be embedded to have forward compatible implementations.
type UnimplementedHeadlessControlServer struct {
}

func (UnimplementedHeadlessControlServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedHeadlessControlServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedHeadlessControlServer) StartWorld(context.Context, *StartWorldRequest) (*StartWorldReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorld not implemented")
}
func (UnimplementedHeadlessControlServer) StopSession(context.Context, *StopSessionRequest) (*StopSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSession not implemented")
}
func (UnimplementedHeadlessControlServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedHeadlessControlServer) UpdateUserRole(context.Context, *UpdateUserRoleRequest) (*UpdateUserRoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedHeadlessControlServer) UpdateSessionParameters(context.Context, *UpdateSessionParametersRequest) (*UpdateSessionParametersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSessionParameters not implemented")
}
func (UnimplementedHeadlessControlServer) mustEmbedUnimplementedHeadlessControlServer() {}

// UnsafeHeadlessControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HeadlessControlServer will
// result in compilation errors.
type UnsafeHeadlessControlServer interface {
	mustEmbedUnimplementedHeadlessControlServer()
}

func RegisterHeadlessControlServer(s grpc.ServiceRegistrar, srv HeadlessControlServer) {
	s.RegisterService(&HeadlessControl_ServiceDesc, srv)
}

func _HeadlessControl_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/headless.HeadlessControl/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControl_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/headless.HeadlessControl/ListSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControl_StartWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServer).StartWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/headless.HeadlessControl/StartWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServer).StartWorld(ctx, req.(*StartWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControl_StopSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServer).StopSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/headless.HeadlessControl/StopSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServer).StopSession(ctx, req.(*StopSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControl_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/headless.HeadlessControl/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControl_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/headless.HeadlessControl/UpdateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServer).UpdateUserRole(ctx, req.(*UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HeadlessControl_UpdateSessionParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionParametersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadlessControlServer).UpdateSessionParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/headless.HeadlessControl/UpdateSessionParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadlessControlServer).UpdateSessionParameters(ctx, req.(*UpdateSessionParametersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HeadlessControl_ServiceDesc is the grpc.ServiceDesc for HeadlessControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HeadlessControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "headless.HeadlessControl",
	HandlerType: (*HeadlessControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _HeadlessControl_Shutdown_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _HeadlessControl_ListSessions_Handler,
		},
		{
			MethodName: "StartWorld",
			Handler:    _HeadlessControl_StartWorld_Handler,
		},
		{
			MethodName: "StopSession",
			Handler:    _HeadlessControl_StopSession_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _HeadlessControl_InviteUser_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _HeadlessControl_UpdateUserRole_Handler,
		},
		{
			MethodName: "UpdateSessionParameters",
			Handler:    _HeadlessControl_UpdateSessionParameters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "headless/headless.proto",
}
