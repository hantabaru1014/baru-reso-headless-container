syntax = "proto3";

package headless.v1;

option csharp_namespace = "Headless.Rpc";

service HeadlessControlService {
  rpc GetAbout(GetAboutRequest) returns (GetAboutResponse);
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
  rpc StartWorld(StartWorldRequest) returns (StartWorldResponse);
  rpc StopSession(StopSessionRequest) returns (StopSessionResponse);
  rpc SaveSessionWorld(SaveSessionWorldRequest) returns (SaveSessionWorldResponse);
  rpc InviteUser(InviteUserRequest) returns (InviteUserResponse);
  rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse);
  rpc UpdateSessionParameters(UpdateSessionParametersRequest) returns (UpdateSessionParametersResponse);
  rpc ListUsersInSession(ListUsersInSessionRequest) returns (ListUsersInSessionResponse);

  // Cloud系
  rpc GetAccountInfo(GetAccountInfoRequest) returns (GetAccountInfoResponse);
}

message GetAccountInfoRequest {}

message GetAccountInfoResponse {
  string user_id = 1;
  string display_name = 2;
  int64 storage_quota_bytes = 3;
  int64 storage_used_bytes = 4;
}

message GetAboutRequest {}

message GetAboutResponse {
  string app_version = 1;
  string resonite_version = 2;
}

message GetStatusRequest {}

message GetStatusResponse {
  float fps = 1;
  float total_engine_update_time = 2;
  int32 syncing_records_count = 3;
}

message ShutdownRequest {}

message ShutdownResponse {}

message ListSessionsRequest {}

message ListSessionsResponse {
  repeated Session sessions = 1;
}

message GetSessionRequest {
  string session_id = 1;
}

message GetSessionResponse {
  Session session = 1;
}

message StartWorldRequest {
  WorldStartupParameters parameters = 1;
}

message StartWorldResponse {
  Session opened_session = 1;
}

message StopSessionRequest {
  string session_id = 1;
}

message StopSessionResponse {}

message SaveSessionWorldRequest {
  string session_id = 1;
}

message SaveSessionWorldResponse {}

message InviteUserRequest {
  string session_id = 1;
  oneof user {
    string user_id = 2;
    string user_name = 3;
  }
}

message InviteUserResponse {}

message UpdateUserRoleRequest {
  string session_id = 1;
  oneof user {
    string user_id = 2;
    string user_name = 3;
  }
  string role = 4;
}

message UpdateUserRoleResponse {
  // 変更後のロール(無効なロールを指定した場合そのままの可能性)
  string role = 1;
}

message UpdateSessionParametersRequest {
  string session_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional int32 max_users = 4;
  optional AccessLevel access_level = 5;
}

message UpdateSessionParametersResponse {}

message ListUsersInSessionRequest {
  string session_id = 1;
}

message ListUsersInSessionResponse {
  repeated UserInSession users = 1;
}

// models

enum AccessLevel {
  ACCESS_LEVEL_UNSPECIFIED = 0;
  ACCESS_LEVEL_PRIVATE = 1;
  ACCESS_LEVEL_LAN = 2;
  ACCESS_LEVEL_CONTACTS = 3;
  ACCESS_LEVEL_CONTACTS_PLUS = 4;
  ACCESS_LEVEL_REGISTERED_USERS = 5;
  ACCESS_LEVEL_ANYONE = 6;
}

message UserInSession {
  string id = 1;
  string name = 2;
  string role = 3;
  bool is_present = 4;
}

message Session {
  string id = 1;
  string name = 2;
  string description = 3;
  AccessLevel access_level = 4;
  int32 users_count = 7;
  int32 max_users = 8;
  optional string thumbnail_url = 5;
  WorldStartupParameters startup_parameters = 6;
}

message WorldStartupParameters {
  optional string name = 1;
  optional string custom_session_id = 2;
  optional string description = 3;
  optional int32 max_users = 4;
  AccessLevel access_level = 5;
  oneof load_world {
    string load_world_url = 6;
    string load_world_preset_name = 7;
  }
  repeated string auto_invite_usernames = 8;
}
