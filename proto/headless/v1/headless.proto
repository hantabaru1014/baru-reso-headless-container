syntax = "proto3";

package headless.v1;

import "google/protobuf/timestamp.proto";

option csharp_namespace = "Headless.Rpc";

service HeadlessControlService {
  rpc GetAbout(GetAboutRequest) returns (GetAboutResponse);
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);
  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
  rpc StartWorld(StartWorldRequest) returns (StartWorldResponse);
  rpc StopSession(StopSessionRequest) returns (StopSessionResponse);
  rpc SaveSessionWorld(SaveSessionWorldRequest) returns (SaveSessionWorldResponse);
  rpc InviteUser(InviteUserRequest) returns (InviteUserResponse);
  rpc AllowUserToJoin(AllowUserToJoinRequest) returns (AllowUserToJoinResponse);
  rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse);
  rpc UpdateSessionParameters(UpdateSessionParametersRequest) returns (UpdateSessionParametersResponse);
  rpc ListUsersInSession(ListUsersInSessionRequest) returns (ListUsersInSessionResponse);
  rpc KickUser(KickUserRequest) returns (KickUserResponse);
  rpc BanUser(BanUserRequest) returns (BanUserResponse);
  rpc GetHostSettings(GetHostSettingsRequest) returns (GetHostSettingsResponse);
  rpc UpdateHostSettings(UpdateHostSettingsRequest) returns (UpdateHostSettingsResponse);
  rpc AllowHostAccess(AllowHostAccessRequest) returns (AllowHostAccessResponse);
  rpc DenyHostAccess(DenyHostAccessRequest) returns (DenyHostAccessResponse);
  rpc GetStartupConfigToRestore(GetStartupConfigToRestoreRequest) returns (GetStartupConfigToRestoreResponse);

  // Cloud系
  rpc GetAccountInfo(GetAccountInfoRequest) returns (GetAccountInfoResponse);
  rpc FetchWorldInfo(FetchWorldInfoRequest) returns (FetchWorldInfoResponse);
  rpc SearchUserInfo(SearchUserInfoRequest) returns (SearchUserInfoResponse);
  rpc GetFriendRequests(GetFriendRequestsRequest) returns (GetFriendRequestsResponse);
  rpc AcceptFriendRequests(AcceptFriendRequestsRequest) returns (AcceptFriendRequestsResponse);
  rpc ListContacts(ListContactsRequest) returns (ListContactsResponse);
  rpc GetContactMessages(GetContactMessagesRequest) returns (GetContactMessagesResponse);
  rpc SendContactMessage(SendContactMessageRequest) returns (SendContactMessageResponse);
}

message GetStartupConfigToRestoreRequest {
  bool include_start_worlds = 1;
}

message GetStartupConfigToRestoreResponse {
  StartupConfig startup_config = 1;
}

message GetHostSettingsRequest {}

message GetHostSettingsResponse {
  optional string universe_id = 1;
  float tick_rate = 2;
  int32 max_concurrent_asset_transfers = 3;
  optional string username_override = 4;
  repeated AllowedAccessEntry allowed_url_hosts = 5;
  repeated string auto_spawn_items = 6;
}

message UpdateHostSettingsRequest {
  optional float tick_rate = 1;
  optional int32 max_concurrent_asset_transfers = 2;
  optional string username_override = 3;
  bool update_auto_spawn_items = 4;
  repeated string auto_spawn_items = 5;
}

message UpdateHostSettingsResponse {}

message AllowHostAccessRequest {
  string host = 1;
  int32 port = 2;
  AllowedAccessEntry.AccessType access_type = 3;
}

message AllowHostAccessResponse {}

message DenyHostAccessRequest {
  string host = 1;
  optional int32 port = 2;
  AllowedAccessEntry.AccessType access_type = 3;
}

message DenyHostAccessResponse {}

message ListContactsRequest {
  int32 limit = 1;
}

message ListContactsResponse {
  repeated UserInfo users = 1;
}

message GetContactMessagesRequest {
  string user_id = 1;
  int32 limit = 2;
}

message GetContactMessagesResponse {
  repeated ContactChatMessage messages = 1;
}

message SendContactMessageRequest {
  string user_id = 1;
  string message = 2;
}

message SendContactMessageResponse {}

message AcceptFriendRequestsRequest {
  repeated string user_ids = 1;
}

message AcceptFriendRequestsResponse {}

message GetFriendRequestsRequest {}

message GetFriendRequestsResponse {
  repeated UserInfo users = 1;
}

message KickUserRequest {
  string session_id = 1;
  oneof user {
    string user_id = 2;
    string user_name = 3;
  }
}

message KickUserResponse {}

message BanUserRequest {
  string session_id = 1;
  oneof user {
    string user_id = 2;
    string user_name = 3;
  }
}

message BanUserResponse {}

message SearchUserInfoRequest {
  oneof user {
    string user_id = 1;
    string user_name = 2;
  }
  bool only_in_contacts = 3;
  bool partial_match = 4;
}

message SearchUserInfoResponse {
  repeated UserInfo users = 1;
}

message GetAccountInfoRequest {}

message GetAccountInfoResponse {
  string user_id = 1;
  string display_name = 2;
  int64 storage_quota_bytes = 3;
  int64 storage_used_bytes = 4;
}

message FetchWorldInfoRequest {
  string url = 1;
}

message FetchWorldInfoResponse {
  string name = 1;
  string description = 2;
  string thumbnail_url = 3;
  int32 default_max_users = 4;
  string owner_id = 5;
  bool is_public = 6;
  bool can_modify = 7;
  bool is_readonly = 8;
  repeated string tags = 9;
}

message GetAboutRequest {}

message GetAboutResponse {
  string app_version = 1;
  string resonite_version = 2;
}

message GetStatusRequest {}

message GetStatusResponse {
  float fps = 1;
  float total_engine_update_time = 2;
  int32 syncing_records_count = 3;
}

message ShutdownRequest {}

message ShutdownResponse {}

message ListSessionsRequest {}

message ListSessionsResponse {
  repeated Session sessions = 1;
}

message GetSessionRequest {
  string session_id = 1;
}

message GetSessionResponse {
  Session session = 1;
}

message StartWorldRequest {
  WorldStartupParameters parameters = 1;
}

message StartWorldResponse {
  Session opened_session = 1;
}

message StopSessionRequest {
  string session_id = 1;
}

message StopSessionResponse {}

message SaveSessionWorldRequest {
  string session_id = 1;
}

message SaveSessionWorldResponse {}

message InviteUserRequest {
  string session_id = 1;
  oneof user {
    string user_id = 2;
    string user_name = 3;
  }
}

message InviteUserResponse {}

message AllowUserToJoinRequest {
  string session_id = 1;
  string user_id = 2;
}

message AllowUserToJoinResponse {}

message UpdateUserRoleRequest {
  string session_id = 1;
  oneof user {
    string user_id = 2;
    string user_name = 3;
  }
  string role = 4;
}

message UpdateUserRoleResponse {
  // 変更後のロール(無効なロールを指定した場合そのままの可能性)
  string role = 1;
}

message UpdateSessionParametersRequest {
  string session_id = 1;
  optional string name = 2;
  optional string description = 3;
  optional int32 max_users = 4;
  optional AccessLevel access_level = 5;
  optional float away_kick_minutes = 6;
  optional int32 idle_restart_interval_seconds = 7;
  optional bool save_on_exit = 8;
  optional int32 auto_save_interval_seconds = 9;
  optional bool auto_sleep = 10;
  optional bool hide_from_public_listing = 11;
  bool update_tags = 12;
  repeated string tags = 13;
  optional bool use_custom_join_verifier = 14;
  optional bool mobile_friendly = 15;
  optional RecordId override_corresponding_world_id = 16;
  optional string role_cloud_variable = 17;
  optional string allow_user_cloud_variable = 18;
  optional string deny_user_cloud_variable = 19;
  optional string required_user_join_cloud_variable = 20;
  optional string required_user_join_cloud_variable_deny_message = 21;
}

message UpdateSessionParametersResponse {}

message ListUsersInSessionRequest {
  string session_id = 1;
}

message ListUsersInSessionResponse {
  repeated UserInSession users = 1;
}

// models

enum AccessLevel {
  ACCESS_LEVEL_UNSPECIFIED = 0;
  ACCESS_LEVEL_PRIVATE = 1;
  ACCESS_LEVEL_LAN = 2;
  ACCESS_LEVEL_CONTACTS = 3;
  ACCESS_LEVEL_CONTACTS_PLUS = 4;
  ACCESS_LEVEL_REGISTERED_USERS = 5;
  ACCESS_LEVEL_ANYONE = 6;
}

message UserInSession {
  string id = 1;
  string name = 2;
  string role = 3;
  bool is_present = 4;
}

message UserInfo {
  string id = 1;
  string name = 2;
  string icon_url = 3;
}

message Session {
  string id = 1;
  string name = 2;
  string description = 3;
  AccessLevel access_level = 4;
  int32 users_count = 7;
  int32 max_users = 8;
  optional string thumbnail_url = 5;
  WorldStartupParameters startup_parameters = 6;
  string session_url = 9;
  int32 time_running_ms = 10 [deprecated = true];
  float away_kick_minutes = 11;
  int32 idle_restart_interval_seconds = 12;
  bool save_on_exit = 13;
  int32 auto_save_interval_seconds = 14;
  bool auto_sleep = 15;
  bool hide_from_public_listing = 16;
  repeated string tags = 17;
  optional google.protobuf.Timestamp last_saved_at = 18;
  bool can_save = 19;
  string world_url = 20;
  google.protobuf.Timestamp started_at = 21;
}

message DefaultUserRole {
  string role = 1;
  string user_name = 2;
}

message WorldStartupParameters {
  optional string name = 1;
  optional string custom_session_id = 2;
  optional string description = 3;
  repeated string tags = 10;
  optional int32 max_users = 4;
  AccessLevel access_level = 5;
  oneof load_world {
    string load_world_url = 6;
    string load_world_preset_name = 7;
  }
  repeated string auto_invite_usernames = 8;
  bool hide_from_public_listing = 9;
  repeated DefaultUserRole default_user_roles = 11;
  float away_kick_minutes = 12;
  int32 idle_restart_interval_seconds = 13;
  bool save_on_exit = 14;
  int32 auto_save_interval_seconds = 15;
  bool auto_sleep = 16;
  repeated string invite_request_handler_usernames = 17;
  uint32 force_port = 18;
  repeated string parent_session_ids = 19;
  bool auto_recover = 20;
  int32 forced_restart_interval_seconds = 21;
  bool use_custom_join_verifier = 22;
  bool mobile_friendly = 23;
  optional RecordId override_corresponding_world_id = 24;
  bool keep_original_roles = 25;
  optional string role_cloud_variable = 26;
  optional string allow_user_cloud_variable = 27;
  optional string deny_user_cloud_variable = 28;
  optional string required_user_join_cloud_variable = 29;
  optional string required_user_join_cloud_variable_deny_message = 30;
  optional string auto_invite_message = 31;
  repeated string join_allowed_user_ids = 32;
}

enum ContactChatMessageType {
  CONTACT_CHAT_MESSAGE_TYPE_UNSPECIFIED = 0;
  CONTACT_CHAT_MESSAGE_TYPE_TEXT = 1;
  CONTACT_CHAT_MESSAGE_TYPE_OBJECT = 2;
  CONTACT_CHAT_MESSAGE_TYPE_SOUND = 3;
  CONTACT_CHAT_MESSAGE_TYPE_SESSION_INVITE = 4;
}

message ContactChatMessage {
  string id = 1;
  ContactChatMessageType type = 2;
  string content = 3;
  google.protobuf.Timestamp send_time = 4;
  optional google.protobuf.Timestamp read_time = 5;
}

message AllowedAccessEntry {
  enum AccessType {
    ACCESS_TYPE_UNSPECIFIED = 0;
    ACCESS_TYPE_HTTP = 1;
    ACCESS_TYPE_WEBSOCKET = 2;
    ACCESS_TYPE_OSC_RECEIVING = 3;
    ACCESS_TYPE_OSC_SENDING = 4;
  }

  string host = 1;
  repeated int32 ports = 2;
  repeated AccessType access_types = 3;
}

message StartupConfig {
  optional string universe_id = 1;
  optional float tick_rate = 2;
  optional int32 max_concurrent_asset_transfers = 3;
  optional string username_override = 4;
  repeated WorldStartupParameters start_worlds = 5;
  repeated AllowedAccessEntry allowed_url_hosts = 6;
  repeated string auto_spawn_items = 7;
}

message RecordId {
  string id = 1;
  string owner_id = 2;
}
