// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: headless.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Headless.Rpc {
  public static partial class HeadlessControl
  {
    static readonly string __ServiceName = "headless.HeadlessControl";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.ShutdownRequest> __Marshaller_headless_ShutdownRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.ShutdownRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.ShutdownReply> __Marshaller_headless_ShutdownReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.ShutdownReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.ListSessionsRequest> __Marshaller_headless_ListSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.ListSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.ListSessionsReply> __Marshaller_headless_ListSessionsReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.ListSessionsReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.StartWorldRequest> __Marshaller_headless_StartWorldRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.StartWorldRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.StartWorldReply> __Marshaller_headless_StartWorldReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.StartWorldReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.StopSessionRequest> __Marshaller_headless_StopSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.StopSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.StopSessionReply> __Marshaller_headless_StopSessionReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.StopSessionReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.InviteUserRequest> __Marshaller_headless_InviteUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.InviteUserRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.InviteUserReply> __Marshaller_headless_InviteUserReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.InviteUserReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.UpdateUserRoleRequest> __Marshaller_headless_UpdateUserRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.UpdateUserRoleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.UpdateUserRoleReply> __Marshaller_headless_UpdateUserRoleReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.UpdateUserRoleReply.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.UpdateSessionParametersRequest> __Marshaller_headless_UpdateSessionParametersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.UpdateSessionParametersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Headless.Rpc.UpdateSessionParametersReply> __Marshaller_headless_UpdateSessionParametersReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Headless.Rpc.UpdateSessionParametersReply.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Headless.Rpc.ShutdownRequest, global::Headless.Rpc.ShutdownReply> __Method_Shutdown = new grpc::Method<global::Headless.Rpc.ShutdownRequest, global::Headless.Rpc.ShutdownReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Shutdown",
        __Marshaller_headless_ShutdownRequest,
        __Marshaller_headless_ShutdownReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Headless.Rpc.ListSessionsRequest, global::Headless.Rpc.ListSessionsReply> __Method_ListSessions = new grpc::Method<global::Headless.Rpc.ListSessionsRequest, global::Headless.Rpc.ListSessionsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSessions",
        __Marshaller_headless_ListSessionsRequest,
        __Marshaller_headless_ListSessionsReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Headless.Rpc.StartWorldRequest, global::Headless.Rpc.StartWorldReply> __Method_StartWorld = new grpc::Method<global::Headless.Rpc.StartWorldRequest, global::Headless.Rpc.StartWorldReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartWorld",
        __Marshaller_headless_StartWorldRequest,
        __Marshaller_headless_StartWorldReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Headless.Rpc.StopSessionRequest, global::Headless.Rpc.StopSessionReply> __Method_StopSession = new grpc::Method<global::Headless.Rpc.StopSessionRequest, global::Headless.Rpc.StopSessionReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopSession",
        __Marshaller_headless_StopSessionRequest,
        __Marshaller_headless_StopSessionReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Headless.Rpc.InviteUserRequest, global::Headless.Rpc.InviteUserReply> __Method_InviteUser = new grpc::Method<global::Headless.Rpc.InviteUserRequest, global::Headless.Rpc.InviteUserReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InviteUser",
        __Marshaller_headless_InviteUserRequest,
        __Marshaller_headless_InviteUserReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Headless.Rpc.UpdateUserRoleRequest, global::Headless.Rpc.UpdateUserRoleReply> __Method_UpdateUserRole = new grpc::Method<global::Headless.Rpc.UpdateUserRoleRequest, global::Headless.Rpc.UpdateUserRoleReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUserRole",
        __Marshaller_headless_UpdateUserRoleRequest,
        __Marshaller_headless_UpdateUserRoleReply);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Headless.Rpc.UpdateSessionParametersRequest, global::Headless.Rpc.UpdateSessionParametersReply> __Method_UpdateSessionParameters = new grpc::Method<global::Headless.Rpc.UpdateSessionParametersRequest, global::Headless.Rpc.UpdateSessionParametersReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSessionParameters",
        __Marshaller_headless_UpdateSessionParametersRequest,
        __Marshaller_headless_UpdateSessionParametersReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Headless.Rpc.HeadlessReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of HeadlessControl</summary>
    [grpc::BindServiceMethod(typeof(HeadlessControl), "BindService")]
    public abstract partial class HeadlessControlBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Headless.Rpc.ShutdownReply> Shutdown(global::Headless.Rpc.ShutdownRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Headless.Rpc.ListSessionsReply> ListSessions(global::Headless.Rpc.ListSessionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Headless.Rpc.StartWorldReply> StartWorld(global::Headless.Rpc.StartWorldRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Headless.Rpc.StopSessionReply> StopSession(global::Headless.Rpc.StopSessionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Headless.Rpc.InviteUserReply> InviteUser(global::Headless.Rpc.InviteUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Headless.Rpc.UpdateUserRoleReply> UpdateUserRole(global::Headless.Rpc.UpdateUserRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Headless.Rpc.UpdateSessionParametersReply> UpdateSessionParameters(global::Headless.Rpc.UpdateSessionParametersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for HeadlessControl</summary>
    public partial class HeadlessControlClient : grpc::ClientBase<HeadlessControlClient>
    {
      /// <summary>Creates a new client for HeadlessControl</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public HeadlessControlClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for HeadlessControl that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public HeadlessControlClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected HeadlessControlClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected HeadlessControlClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.ShutdownReply Shutdown(global::Headless.Rpc.ShutdownRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Shutdown(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.ShutdownReply Shutdown(global::Headless.Rpc.ShutdownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Shutdown, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.ShutdownReply> ShutdownAsync(global::Headless.Rpc.ShutdownRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ShutdownAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.ShutdownReply> ShutdownAsync(global::Headless.Rpc.ShutdownRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Shutdown, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.ListSessionsReply ListSessions(global::Headless.Rpc.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.ListSessionsReply ListSessions(global::Headless.Rpc.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSessions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.ListSessionsReply> ListSessionsAsync(global::Headless.Rpc.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.ListSessionsReply> ListSessionsAsync(global::Headless.Rpc.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSessions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.StartWorldReply StartWorld(global::Headless.Rpc.StartWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWorld(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.StartWorldReply StartWorld(global::Headless.Rpc.StartWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartWorld, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.StartWorldReply> StartWorldAsync(global::Headless.Rpc.StartWorldRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWorldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.StartWorldReply> StartWorldAsync(global::Headless.Rpc.StartWorldRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartWorld, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.StopSessionReply StopSession(global::Headless.Rpc.StopSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.StopSessionReply StopSession(global::Headless.Rpc.StopSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopSession, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.StopSessionReply> StopSessionAsync(global::Headless.Rpc.StopSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StopSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.StopSessionReply> StopSessionAsync(global::Headless.Rpc.StopSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopSession, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.InviteUserReply InviteUser(global::Headless.Rpc.InviteUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InviteUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.InviteUserReply InviteUser(global::Headless.Rpc.InviteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InviteUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.InviteUserReply> InviteUserAsync(global::Headless.Rpc.InviteUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InviteUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.InviteUserReply> InviteUserAsync(global::Headless.Rpc.InviteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InviteUser, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.UpdateUserRoleReply UpdateUserRole(global::Headless.Rpc.UpdateUserRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.UpdateUserRoleReply UpdateUserRole(global::Headless.Rpc.UpdateUserRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUserRole, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.UpdateUserRoleReply> UpdateUserRoleAsync(global::Headless.Rpc.UpdateUserRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUserRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.UpdateUserRoleReply> UpdateUserRoleAsync(global::Headless.Rpc.UpdateUserRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUserRole, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.UpdateSessionParametersReply UpdateSessionParameters(global::Headless.Rpc.UpdateSessionParametersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSessionParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Headless.Rpc.UpdateSessionParametersReply UpdateSessionParameters(global::Headless.Rpc.UpdateSessionParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSessionParameters, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.UpdateSessionParametersReply> UpdateSessionParametersAsync(global::Headless.Rpc.UpdateSessionParametersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSessionParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Headless.Rpc.UpdateSessionParametersReply> UpdateSessionParametersAsync(global::Headless.Rpc.UpdateSessionParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSessionParameters, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override HeadlessControlClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new HeadlessControlClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(HeadlessControlBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Shutdown, serviceImpl.Shutdown)
          .AddMethod(__Method_ListSessions, serviceImpl.ListSessions)
          .AddMethod(__Method_StartWorld, serviceImpl.StartWorld)
          .AddMethod(__Method_StopSession, serviceImpl.StopSession)
          .AddMethod(__Method_InviteUser, serviceImpl.InviteUser)
          .AddMethod(__Method_UpdateUserRole, serviceImpl.UpdateUserRole)
          .AddMethod(__Method_UpdateSessionParameters, serviceImpl.UpdateSessionParameters).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, HeadlessControlBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Shutdown, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Headless.Rpc.ShutdownRequest, global::Headless.Rpc.ShutdownReply>(serviceImpl.Shutdown));
      serviceBinder.AddMethod(__Method_ListSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Headless.Rpc.ListSessionsRequest, global::Headless.Rpc.ListSessionsReply>(serviceImpl.ListSessions));
      serviceBinder.AddMethod(__Method_StartWorld, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Headless.Rpc.StartWorldRequest, global::Headless.Rpc.StartWorldReply>(serviceImpl.StartWorld));
      serviceBinder.AddMethod(__Method_StopSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Headless.Rpc.StopSessionRequest, global::Headless.Rpc.StopSessionReply>(serviceImpl.StopSession));
      serviceBinder.AddMethod(__Method_InviteUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Headless.Rpc.InviteUserRequest, global::Headless.Rpc.InviteUserReply>(serviceImpl.InviteUser));
      serviceBinder.AddMethod(__Method_UpdateUserRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Headless.Rpc.UpdateUserRoleRequest, global::Headless.Rpc.UpdateUserRoleReply>(serviceImpl.UpdateUserRole));
      serviceBinder.AddMethod(__Method_UpdateSessionParameters, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Headless.Rpc.UpdateSessionParametersRequest, global::Headless.Rpc.UpdateSessionParametersReply>(serviceImpl.UpdateSessionParameters));
    }

  }
}
#endregion
